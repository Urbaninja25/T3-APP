import Head from "next/head";
import { type NextPage } from "next";

import { useUser, SignInButton, UserButton } from "@clerk/nextjs";

import { api } from "~/utils/api";

import type { RouterOutputs } from "~/utils/api";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import { LoadingPage } from "~/componenets/loading";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();

  if (!user) return null;

  return (
    <div className="flex w-full gap-3">
      <Image
        className="h-16 w-16 rounded-full"
        src={user.imageUrl}
        alt="users profile image"
        width={56}
        height={56}
      />
      <input
        placeholder="Type some emojis!"
        className="grow bg-transparent outline-none"
        type="text"
      />
    </div>
  );
};

type PostWithUser = RouterOutputs["post"]["getAll"][number];

const Postview = (props: PostWithUser) => {
  const { post, author } = props;

  return (
    <div key={post.id} className="flex gap-3 border-b border-slate-400 p-4">
      <Image
        src={author.imageUrl}
        className="h-14 w-14 rounded-full"
        alt={`${author.username}'s profile picture`}
        width={56}
        height={56}
      />
      <div className="flex flex-col">
        <div className="flex gap-1  font-bold ">
          <span className="text-slate-300">{`@${author.username}`}</span>
          <span className="font-thin text-gray-400 antialiased">{`· ${dayjs(
            post.createdAt,
          ).fromNow()}`}</span>
        </div>
        <span>{post.content}</span>
      </div>
    </div>
  );
};

//გავიტაენთ ეს სხვა კომპონენტად.ანუ ესაა ქვემოთა feed ი .ეს იმიტო ვქენი რო რეალურად ზემოთ ჩვენ ვიყენებთ მხოლოდ clerk დატას ხოლო feed ში db დატას.და რეალურად კლერკი ეგრევე მაწვდის ინფოს დბ ს კი დრო ჭირდება.ამიტომ მე მინდა რო კლერკის დატა ეგრევე გამოჩნდეს ხოლო feed ში ქვემოთ მქონდეს loading spinner ი
const Feed = () => {
  const { data, isLoading: postsLoading } = api.post.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;

  if (!data) return <div>something went wrong.CALL NUGI FIRST !</div>;

  return (
    <div className="flex flex-col">
      {[...data, ...data]?.map((fullPost) => (
        <Postview {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  // A boolean that until Clerk loads and initializes, will be set to false. Once Clerk loads, isLoaded will be set to true.
  const { isLoaded: userLoaded, isSignedIn } = useUser();
  //the reason why we have these here is to start fetching data early,asap.ამაში დაგვეხმარება usequery რომელსაც აქ ეს უნარი loading stateებთან ერთად :
  //Caching: It often includes a caching mechanism, which means that if the same query is made multiple times, the data can be fetched from a local cache if it's available. This helps reduce the number of unnecessary network requests and improves performance.
  api.post.getAll.useQuery();

  if (!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center">
        <div className="h-screen w-full border-x  border-slate-400 md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4">
            {!isSignedIn && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )}
            {isSignedIn && CreatePostWizard()}
            {isSignedIn && <UserButton />}
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
