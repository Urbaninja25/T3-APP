import { useState } from "react";
import Head from "next/head";
import { type NextPage } from "next";

import { useUser, SignInButton, UserButton } from "@clerk/nextjs";

import { api } from "~/utils/api";

import type { RouterOutputs } from "~/utils/api";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import { LoadingPage } from "~/componenets/loading";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();
  // input ის state ს ვამენეჯებ
  const [input, setInput] = useState("");
  //მივწვდი კონტექსტს
  const ctx = api.useContext();
  // mutate is a function returned by the useMutation hook from the api.post.create. It is commonly used for making mutations, which typically involve creating or updating data on the server. In this case, it's used to create a new post based on the input value (the content of the post).

  //isLoading is an alias for the isPosting variable, which indicates whether the mutation is in progress. When isPosting is true, it can be used to disable the input field and button, preventing the user from sending multiple requests while the previous request is still being processed.
  const { mutate, isLoading: isPosting } = api.post.create.useMutation({
    onSuccess: () => {
      //clear input fields
      setInput("");
      //აქ void იმიტო დაწერე წინ რო typescripts ვუთხრათ რო კი შენ გაქ მასთან პრობლემა იმიტორო promise ია მარა მე ეგ როგორც ფრომისი არ მაინტერესებს მთავარია ბეგრაუნდ call გააკეთოსო
      // with the code ctx.post.getAll.invalidate(), you're manually triggering a refresh of the query by invalidating it.
      void ctx.post.getAll.invalidate();
    },
  });

  if (!user) return null;

  return (
    <div className="flex w-full gap-3">
      <Image
        className="h-16 w-16 rounded-full"
        src={user.imageUrl}
        alt="users profile image"
        width={56}
        height={56}
      />
      <input
        placeholder="Type something!"
        className="grow bg-transparent outline-none"
        type="text"
        // ვამენეჯებ input state ს
        value={input}
        onChange={(e) => setInput(e.target.value)}
        //This line sets the disabled attribute of the <input> element to true when isPosting is true. This prevents the user from editing the input field while a post is being created. It's a common practice to disable input fields during an ongoing action to prevent user interactions that might interfere with the process.
        disabled={isPosting}
      />
      {/* This button element triggers the mutate function when clicked. It sends a request to create a new post with the content provided in the input field */}
      <button onClick={() => mutate({ content: input })}> POST </button>
    </div>
  );
};

type PostWithUser = RouterOutputs["post"]["getAll"][number];

const Postview = (props: PostWithUser) => {
  const { post, author } = props;

  return (
    <div key={post.id} className="flex gap-3 border-b border-slate-400 p-4">
      <Image
        src={author.imageUrl}
        className="h-14 w-14 rounded-full"
        alt={`${author.username}'s profile picture`}
        width={56}
        height={56}
      />
      <div className="flex flex-col">
        <div className="flex gap-1  font-bold ">
          <span className="text-slate-300">{`@${author.username}`}</span>
          <span className="font-thin text-gray-400 antialiased">{`· ${dayjs(
            post.created_at,
          ).fromNow()}`}</span>
        </div>
        <span className="text-xl">{post.content}</span>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.post.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;

  if (!data) return <div>something went wrong.CALL NUGI FIRST !</div>;

  return (
    <div className="flex flex-col">
      {data?.map((fullPost) => (
        <Postview {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
};

// ?????????????what these nextpage do ?
const Home: NextPage = () => {
  const { isLoaded: userLoaded, isSignedIn } = useUser();

  if (!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center">
        <div className="h-screen w-full border-x  border-slate-400 md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4">
            {!isSignedIn && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )}
            {isSignedIn && CreatePostWizard()}
            {/* useer logout btn გამოსაწევიგაქ  */}
            {isSignedIn && <UserButton />}
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
